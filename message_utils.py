import logging
import datetime
from typing import Optional, Dict, Any, List, Callable, Union
from sheets import MSK_TIMEZONE  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)

from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from keyboards.main_menu import get_main_menu_keyboard

from sheets import sheets_client


# Dictionary to store header message IDs for each chat
header_messages = {}

# Dictionary to store temporary messages to clean up later
# Format: {chat_id: [list of message IDs]}
temp_messages = {}

# Dictionary to store bot messages for each chat (except notifications)
# Format: {chat_id: [list of message IDs]}
bot_messages = {}

# Dictionary to store input request messages that need to be cleaned up after processing
# Format: {chat_id: [list of message IDs]}
input_request_messages = {}


async def send_header(bot: Bot, chat_id: int) -> Optional[Message]:
    """
    Send the interactive header to the chat.
    
    Args:
        bot: Bot instance
        chat_id: Chat ID
        
    Returns:
        Optional[Message]: Sent message or None if failed
    """
    # Prepare the text for the header
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–ø–∫–∏
        today = datetime.datetime.now(MSK_TIMEZONE).strftime("%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ data_manager
        from data_manager import data_manager
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        stats = data_manager.get_daily_statistics(chat_id, force_refresh=True)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —à–∞–ø–∫–∏ –≤ chat_id {chat_id}: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not stats or "transactions_count" not in stats:
            logging.warning(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è chat_id {chat_id} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π")
            stats = {
                "total_amount": 0,
                "awaiting_amount": 0,
                "to_pay_amount": 0,
                "paid_amount": 0,
                "avg_rate": 0,
                "avg_commission": 0,
                "transactions_count": 0,
                "unpaid_usdt": 0,
                "to_pay_usdt": 0,
                "total_usdt": 0,
                "paid_usdt": 0,
                "methods_count": {}
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è
        day_settings = data_manager.get_day_settings(chat_id) or {"rate": 0, "commission_percent": 0}
        current_rate_raw = day_settings.get("rate", 0)
        commission_percent = day_settings.get("commission_percent", 0)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        # –ö—É—Ä—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ–º, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "92.50 USDT" –∏–ª–∏ "92.50‚ÇΩ"
        if isinstance(current_rate_raw, str):
            # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            rate_str = current_rate_raw.replace('"', '').replace('‚ÇΩ', '').strip()
            if "USDT" in rate_str:
                # –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ USDT, –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                current_rate = float(rate_str.replace('USDT', '').strip())
                display_rate = f'"{current_rate:.2f} USDT"'
            else:
                # –ï—Å–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                current_rate = float(rate_str)
                display_rate = f'"{current_rate:.2f} USDT"'
        else:
            # –ï—Å–ª–∏ –∫—É—Ä—Å —á–∏—Å–ª–æ–≤–æ–π
            current_rate = float(current_rate_raw) if current_rate_raw else 0
            if current_rate > 0:
                display_rate = f'"{current_rate:.2f} USDT"'
            else:
                display_rate = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT
        # –ï—Å–ª–∏ –∫—É—Ä—Å = 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 90 –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ USDT, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –µ–≥–æ –≤—Å–µ–≥–¥–∞
        usdt_rate = current_rate if current_rate else 90
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        total_amount = stats.get("total_amount", 0)
        awaiting_amount = stats.get("awaiting_amount", 0)
        paid_amount = stats.get("paid_amount", 0)
        to_pay_amount = stats.get("to_pay_amount", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ USDT, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        unpaid_usdt = stats.get("unpaid_usdt", round(awaiting_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        to_pay_usdt = stats.get("to_pay_usdt", round(to_pay_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        total_usdt = stats.get("total_usdt", round(total_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        paid_usdt = stats.get("paid_usdt", round(paid_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        
        # Format the header
        header_text = (
            f"üå† [OCTOFX] {today}\n\n"
            f"üÜî –ê–π–¥–∏ —á–∞—Ç–∞: {chat_id}\n"
            f"üßÆ –ö—É—Ä—Å: {display_rate} | –ö–æ–º–∏—Å—Å–∏—è: {commission_percent}%\n\n"
            f"‚öúÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º: {awaiting_amount:,.1f}‚ÇΩ ({unpaid_usdt:.1f} USDT)\n"
            f"üí≥ –ö –≤—ã–ø–ª–∞—Ç–µ: {to_pay_amount:,.1f}‚ÇΩ ({to_pay_usdt:.1f} USDT)\n"
            f"üí¥ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.1f}‚ÇΩ ({total_usdt:.1f} USDT)\n\n"
            f"üí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: {paid_amount:,.1f}‚ÇΩ ({paid_usdt:.1f} USDT)\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ"
        )
        
        # Send the header
        try:
            message = await bot.send_message(
                chat_id,
                header_text,
                reply_markup=get_main_menu_keyboard()
            )
            
            # Store the message ID
            header_messages[chat_id] = message.message_id
            
            # –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à–∞–ø–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, 
            # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            
            return message
        except TelegramBadRequest as e:
            if "business connection not found" in str(e).lower():
                logging.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∏–∑–Ω–µ—Å-—á–∞—Ç: {e}")
                # –ú—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å
                logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è chat_id {chat_id}")
                return None
            else:
                raise
            
    except Exception as e:
        logging.error(f"Error sending header: {e}")
        return None


async def update_header(bot: Bot, chat_id: int) -> Optional[Message]:
    """
    Update the interactive header in the chat.
    
    Args:
        bot: Bot instance
        chat_id: Chat ID
        
    Returns:
        Optional[Message]: Updated message or None if failed
    """
    # If no header exists for this chat, create a new one
    if chat_id not in header_messages:
        return await send_header(bot, chat_id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–ø–∫–∏
        today = datetime.datetime.now(MSK_TIMEZONE).strftime("%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å –∏–∑ data_manager
        from data_manager import data_manager
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        stats = data_manager.get_daily_statistics(chat_id, force_refresh=True)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–ø–∫–∏ –≤ chat_id {chat_id}: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not stats or "transactions_count" not in stats:
            logging.warning(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–ø–∫–∏ –≤ chat_id {chat_id} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π")
            stats = {
                "total_amount": 0,
                "awaiting_amount": 0,
                "to_pay_amount": 0,
                "paid_amount": 0,
                "avg_rate": 0,
                "avg_commission": 0,
                "transactions_count": 0,
                "unpaid_usdt": 0,
                "to_pay_usdt": 0,
                "total_usdt": 0,
                "paid_usdt": 0,
                "methods_count": {}
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
        day_settings = data_manager.get_day_settings(chat_id) or {"rate": 0, "commission_percent": 0}
        current_rate_raw = day_settings.get("rate", 0)
        commission_percent = day_settings.get("commission_percent", 0)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        # –ö—É—Ä—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ–º, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "92.50 USDT" –∏–ª–∏ "92.50‚ÇΩ"
        if isinstance(current_rate_raw, str):
            # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            rate_str = current_rate_raw.replace('"', '').replace('‚ÇΩ', '').strip()
            if "USDT" in rate_str:
                # –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ USDT, –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                current_rate = float(rate_str.replace('USDT', '').strip())
                display_rate = f'"{current_rate:.2f} USDT"'
            else:
                # –ï—Å–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                current_rate = float(rate_str)
                display_rate = f'"{current_rate:.2f} USDT"'
        else:
            # –ï—Å–ª–∏ –∫—É—Ä—Å —á–∏—Å–ª–æ–≤–æ–π
            current_rate = float(current_rate_raw) if current_rate_raw else 0
            if current_rate > 0:
                display_rate = f'"{current_rate:.2f} USDT"'
            else:
                display_rate = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT
        # –ï—Å–ª–∏ –∫—É—Ä—Å = 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 90 –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ USDT, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –µ–≥–æ –≤—Å–µ–≥–¥–∞
        usdt_rate = current_rate if current_rate else 90  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è USDT
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        total_amount = stats.get("total_amount", 0)
        awaiting_amount = stats.get("awaiting_amount", 0)
        paid_amount = stats.get("paid_amount", 0)
        to_pay_amount = stats.get("to_pay_amount", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ USDT, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        unpaid_usdt = stats.get("unpaid_usdt", round(awaiting_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        to_pay_usdt = stats.get("to_pay_usdt", round(to_pay_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        total_usdt = stats.get("total_usdt", round(total_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        paid_usdt = stats.get("paid_usdt", round(paid_amount / usdt_rate, 1) if usdt_rate > 0 else 0)
        
        # Format the header
        header_text = (
            f"üå† [OCTOFX] {today}\n\n"
            f"üÜî –ê–π–¥–∏ —á–∞—Ç–∞: {chat_id}\n"
            f"üßÆ –ö—É—Ä—Å: {display_rate} | –ö–æ–º–∏—Å—Å–∏—è: {commission_percent}%\n\n"
            f"‚öúÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º: {awaiting_amount:,.1f}‚ÇΩ ({unpaid_usdt:.1f} USDT)\n"
            f"üí≥ –ö –≤—ã–ø–ª–∞—Ç–µ: {to_pay_amount:,.1f}‚ÇΩ ({to_pay_usdt:.1f} USDT)\n"
            f"üí¥ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.1f}‚ÇΩ ({total_usdt:.1f} USDT)\n\n"
            f"üí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: {paid_amount:,.1f}‚ÇΩ ({paid_usdt:.1f} USDT)\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ"
        )
        
        # Update the header
        message_id = header_messages[chat_id]
        try:
            # Convert chat_id to string to avoid validation error with negative IDs
            chat_id_str = str(chat_id) if isinstance(chat_id, int) else chat_id
            
            await bot.edit_message_text(
                header_text,
                chat_id_str,
                message_id,
                reply_markup=get_main_menu_keyboard()
            )
            return None
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                return None
            elif "business connection not found" in str(e).lower():
                logging.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∏–∑–Ω–µ—Å-—á–∞—Ç–µ: {e}")
                # –ú—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å
                logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è chat_id {chat_id}")
                return None
            else:
                raise
    except Exception as e:
        logging.error(f"Error updating header: {e}")
        
        # If the message was deleted or otherwise not found, send a new one
        if "message to edit not found" in str(e).lower() or "message can't be edited" in str(e).lower():
            return await send_header(bot, chat_id)
        
        return None


async def register_temp_message(chat_id: int, message_id: int):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    chat_id_str = str(chat_id)
    
    if chat_id_str not in temp_messages:
        temp_messages[chat_id_str] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_id not in temp_messages[chat_id_str]:
        temp_messages[chat_id_str].append(message_id)
        logging.debug(f"Registered temp message {message_id} in chat {chat_id_str}")


async def register_input_request(chat_id: int, message_id: int):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    chat_id_str = str(chat_id)
    
    if chat_id_str not in input_request_messages:
        input_request_messages[chat_id_str] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_id not in input_request_messages[chat_id_str]:
        input_request_messages[chat_id_str].append(message_id)
        logging.debug(f"Registered input request message {message_id} in chat {chat_id_str}")


async def delete_input_requests(bot: Bot, chat_id: int):
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤–≤–æ–¥–∞ –≤ —á–∞—Ç–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    chat_id_str = str(chat_id)
    
    if chat_id_str not in input_request_messages or not input_request_messages[chat_id_str]:
        return
    
    deleted_count = 0
    for message_id in input_request_messages[chat_id_str]:
        try:
            await bot.delete_message(chat_id, message_id)
            deleted_count += 1
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ {message_id}: {e}")
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤–≤–æ–¥–∞ –≤ —á–∞—Ç–µ {chat_id}")
    input_request_messages[chat_id_str] = []


async def delete_temp_messages(bot: Bot, chat_id: int):
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    chat_id_str = str(chat_id)
    
    if chat_id_str not in temp_messages or not temp_messages[chat_id_str]:
        logging.info(f"No temporary messages to delete in chat {chat_id}")
        return
    
    deleted_count = 0
    for message_id in temp_messages[chat_id_str]:
        try:
            await bot.delete_message(chat_id, message_id)
            deleted_count += 1
        except TelegramBadRequest as e:
            if "message to delete not found" in str(e).lower():
                logging.warning(f"Temporary message {message_id} already deleted")
            else:
                logging.warning(f"Error deleting temporary message {message_id}: {e}")
        except Exception as e:
            logging.warning(f"Error deleting temporary message {message_id}: {e}")
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    logging.info(f"Deleted {deleted_count}/{len(temp_messages[chat_id_str])} temporary messages in chat {chat_id}")
    temp_messages[chat_id_str] = []


async def send_temp_message(bot: Bot, chat_id: int, text: str, **kwargs) -> Optional[Message]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bot.send_message
        
    Returns:
        Optional[Message]: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º parse_mode='HTML' –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if 'parse_mode' not in kwargs:
            kwargs['parse_mode'] = 'HTML'
            
        message = await bot.send_message(chat_id, text, **kwargs)
        await register_temp_message(chat_id, message.message_id)
        return message
    except Exception as e:
        logging.error(f"Error sending temporary message: {e}")
        return None


async def register_bot_message(chat_id: int, message_id: int):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    chat_id_str = str(chat_id)
    
    if chat_id_str not in bot_messages:
        bot_messages[chat_id_str] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ
    if message_id not in bot_messages[chat_id_str]:
        bot_messages[chat_id_str].append(message_id)
        logging.debug(f"Registered bot message {message_id} in chat {chat_id_str}")


async def safe_edit_message_text(callback_query: CallbackQuery, text: str, **kwargs) -> Optional[Message]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
    
    Args:
        callback_query: CallbackQuery –æ–±—ä–µ–∫—Ç
        text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è edit_message_text
        
    Returns:
        Optional[Message]: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º parse_mode='HTML' –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if 'parse_mode' not in kwargs:
            kwargs['parse_mode'] = 'HTML'
        
        message = await callback_query.message.edit_text(text, **kwargs)
        return message
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            return None
        else:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise
    except Exception as e:
        logging.error(f"Error editing message: {e}")
        return None


async def send_bot_message(bot: Bot, chat_id: int, text: str, **kwargs) -> Optional[Message]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bot.send_message
        
    Returns:
        Optional[Message]: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º parse_mode='HTML' –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if 'parse_mode' not in kwargs:
            kwargs['parse_mode'] = 'HTML'
            
        message = await bot.send_message(chat_id, text, **kwargs)
        await register_bot_message(chat_id, message.message_id)
        return message
    except Exception as e:
        logging.error(f"Error sending bot message: {e}")
        return None


async def send_payment_notification(bot: Bot, chat_id: int, text: str, **kwargs) -> Optional[Message]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bot.send_message
        
    Returns:
        Optional[Message]: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º parse_mode='HTML' –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if 'parse_mode' not in kwargs:
            kwargs['parse_mode'] = 'HTML'
            
        message = await bot.send_message(chat_id, text, **kwargs)
        # –¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /clear
        await register_bot_message(chat_id, message.message_id)
        return message
    except Exception as e:
        logging.error(f"Error sending payment notification: {e}")
        return None


async def try_deep_clean(bot: Bot, chat_id: int, last_message_id: int, limit: int = 100) -> int:
    """
    –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        last_message_id: ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    deleted_count = 0
    # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç last_message_id –¥–æ last_message_id - limit
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for message_id in range(last_message_id, max(last_message_id - limit, 1), -1):
        try:
            await bot.delete_message(chat_id, message_id)
            deleted_count += 1
        except TelegramBadRequest as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
            continue
        except Exception as e:
            logging.warning(f"Error deleting message {message_id}: {e}")
            continue
    
    return deleted_count